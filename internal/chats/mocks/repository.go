// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/IfuryI/ChatAPI/internal/chats (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/IfuryI/ChatAPI/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddMessageToChat mocks base method.
func (m *MockRepository) AddMessageToChat(arg0 *models.Message) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMessageToChat", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMessageToChat indicates an expected call of AddMessageToChat.
func (mr *MockRepositoryMockRecorder) AddMessageToChat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessageToChat", reflect.TypeOf((*MockRepository)(nil).AddMessageToChat), arg0)
}

// CreateChat mocks base method.
func (m *MockRepository) CreateChat(arg0 *models.Chat) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChat", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChat indicates an expected call of CreateChat.
func (mr *MockRepositoryMockRecorder) CreateChat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChat", reflect.TypeOf((*MockRepository)(nil).CreateChat), arg0)
}

// GetAllChatMessages mocks base method.
func (m *MockRepository) GetAllChatMessages(arg0 string) ([]*models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllChatMessages", arg0)
	ret0, _ := ret[0].([]*models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllChatMessages indicates an expected call of GetAllChatMessages.
func (mr *MockRepositoryMockRecorder) GetAllChatMessages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllChatMessages", reflect.TypeOf((*MockRepository)(nil).GetAllChatMessages), arg0)
}

// GetAllUserChats mocks base method.
func (m *MockRepository) GetAllUserChats(arg0 string) ([]*models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserChats", arg0)
	ret0, _ := ret[0].([]*models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserChats indicates an expected call of GetAllUserChats.
func (mr *MockRepositoryMockRecorder) GetAllUserChats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserChats", reflect.TypeOf((*MockRepository)(nil).GetAllUserChats), arg0)
}

// GetChatByID mocks base method.
func (m *MockRepository) GetChatByID(arg0 string) (*models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatByID", arg0)
	ret0, _ := ret[0].(*models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatByID indicates an expected call of GetChatByID.
func (mr *MockRepositoryMockRecorder) GetChatByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatByID", reflect.TypeOf((*MockRepository)(nil).GetChatByID), arg0)
}

// GetChatByName mocks base method.
func (m *MockRepository) GetChatByName(arg0 string) (*models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatByName", arg0)
	ret0, _ := ret[0].(*models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatByName indicates an expected call of GetChatByName.
func (mr *MockRepositoryMockRecorder) GetChatByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatByName", reflect.TypeOf((*MockRepository)(nil).GetChatByName), arg0)
}

// IsUserInChat mocks base method.
func (m *MockRepository) IsUserInChat(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserInChat", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsUserInChat indicates an expected call of IsUserInChat.
func (mr *MockRepositoryMockRecorder) IsUserInChat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserInChat", reflect.TypeOf((*MockRepository)(nil).IsUserInChat), arg0, arg1)
}
