// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/IfuryI/ChatAPI/internal/chats (interfaces: UseCase)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/IfuryI/ChatAPI/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// AddMessageToChat mocks base method.
func (m *MockUseCase) AddMessageToChat(arg0 *models.Message) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMessageToChat", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMessageToChat indicates an expected call of AddMessageToChat.
func (mr *MockUseCaseMockRecorder) AddMessageToChat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessageToChat", reflect.TypeOf((*MockUseCase)(nil).AddMessageToChat), arg0)
}

// CreateChat mocks base method.
func (m *MockUseCase) CreateChat(arg0 *models.Chat) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChat", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChat indicates an expected call of CreateChat.
func (mr *MockUseCaseMockRecorder) CreateChat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChat", reflect.TypeOf((*MockUseCase)(nil).CreateChat), arg0)
}

// GetAllChatMessages mocks base method.
func (m *MockUseCase) GetAllChatMessages(arg0 string) ([]*models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllChatMessages", arg0)
	ret0, _ := ret[0].([]*models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllChatMessages indicates an expected call of GetAllChatMessages.
func (mr *MockUseCaseMockRecorder) GetAllChatMessages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllChatMessages", reflect.TypeOf((*MockUseCase)(nil).GetAllChatMessages), arg0)
}

// GetAllUserChats mocks base method.
func (m *MockUseCase) GetAllUserChats(arg0 string) ([]*models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserChats", arg0)
	ret0, _ := ret[0].([]*models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserChats indicates an expected call of GetAllUserChats.
func (mr *MockUseCaseMockRecorder) GetAllUserChats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserChats", reflect.TypeOf((*MockUseCase)(nil).GetAllUserChats), arg0)
}
